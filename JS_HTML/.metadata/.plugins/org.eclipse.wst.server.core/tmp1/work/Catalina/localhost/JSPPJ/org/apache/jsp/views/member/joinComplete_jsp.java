/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2020-04-13 10:39:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.HashMap;
import java.util.Map;
import com.kh.jspPrac.member.model.vo.Member;

public final class joinComplete_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/views/member/../include/top.jsp", Long.valueOf(1586773871935L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.kh.jspPrac.member.model.vo.Member");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");

	Member mem = (Member) request.getAttribute("member");

      out.write("\r\n");
      out.write("<h1>UCLASS JSP 수업중</h1>\r\n");
      out.write("<h3>너무 쉽다!</h3>\r\n");
      out.write("<hr>");
      out.write("\r\n");
      out.write("\t<!-- \r\n");
      out.write("\tjsp action tag include 는 include 지시자와 같은 기능을 한다.\r\n");
      out.write("\t단, include 지시자는 inline 방식인 반면 jsp action tag의 include는\r\n");
      out.write("\t내부적으로 include 되는 jsp 호출하는 방식이다.\r\n");
      out.write("\t -->\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<h1>회원 가입 성공!</h1>\r\n");
      out.write("\t<h3>--- 회원 정보 ---</h3>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\tID :\r\n");
      out.write("\t\t");
      out.print(mem.getmId());
      out.write("<br> 비밀번호 :\r\n");
      out.write("\t\t");
      out.print(mem.getmPwd());
      out.write("<br> 전화번호 :\r\n");
      out.write("\t\t");
      out.print(mem.getPhone());
      out.write("\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<h1>jsp usebean 액션태그</h1>\r\n");
      out.write("\t<h3>id, class, scope중 하나라도 다르면 새로운 객체가 생성이 된다.</h3>\r\n");
      out.write("\t<h3>----회원정보----</h3>\r\n");
      out.write("\t");
      com.kh.jspPrac.member.model.vo.Member pageMember = null;
      pageMember = (com.kh.jspPrac.member.model.vo.Member) _jspx_page_context.getAttribute("pageMember", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (pageMember == null){
        pageMember = new com.kh.jspPrac.member.model.vo.Member();
        _jspx_page_context.setAttribute("pageMember", pageMember, javax.servlet.jsp.PageContext.PAGE_SCOPE);
        out.write("\r\n");
        out.write("\r\n");
        out.write("\t\t");
        org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("pageMember"), "mId", "user1", null, null, false);
        out.write("\r\n");
        out.write("\t\t");
        org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("pageMember"), "mPwd", "pass1", null, null, false);
        out.write("\r\n");
        out.write("\t\t");
        org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("pageMember"), "phone", "010-0000-0000", null, null, false);
        out.write('\r');
        out.write('\n');
        out.write('	');
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\tID :\r\n");
      out.write("\t\t");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((com.kh.jspPrac.member.model.vo.Member)_jspx_page_context.findAttribute("pageMember")).getmId())));
      out.write("<br> 비밀번호 :\r\n");
      out.write("\t\t");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((com.kh.jspPrac.member.model.vo.Member)_jspx_page_context.findAttribute("pageMember")).getmPwd())));
      out.write("<br> 전화번호 :\r\n");
      out.write("\t\t");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((com.kh.jspPrac.member.model.vo.Member)_jspx_page_context.findAttribute("pageMember")).getPhone())));
      out.write("\r\n");
      out.write("\t<h3>jsp usebean 액션태그</h3>\r\n");
      out.write("\t<h3>id 와 class, scope가 모두 같은 객체가 존재하면 그 객체가 useBean 에 담긴다.</h3>\r\n");
      out.write("\t<h3>---회원정보---</h3>\r\n");
      out.write("\r\n");
      out.write("\t");
      com.kh.jspPrac.member.model.vo.Member member = null;
      member = (com.kh.jspPrac.member.model.vo.Member) _jspx_page_context.getAttribute("member", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (member == null){
        member = new com.kh.jspPrac.member.model.vo.Member();
        _jspx_page_context.setAttribute("member", member, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\tID :\r\n");
      out.write("\t\t");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((com.kh.jspPrac.member.model.vo.Member)_jspx_page_context.findAttribute("member")).getmId())));
      out.write("<br> 비밀번호 :\r\n");
      out.write("\t\t");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((com.kh.jspPrac.member.model.vo.Member)_jspx_page_context.findAttribute("member")).getmPwd())));
      out.write("<br> 전화번호 :\r\n");
      out.write("\t\t");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((com.kh.jspPrac.member.model.vo.Member)_jspx_page_context.findAttribute("member")).getPhone())));
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</p>\r\n");
      out.write("\r\n");
      out.write("\t");
      if (true) {
        _jspx_page_context.forward("../01_jspSample.jsp");
        return;
      }
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
