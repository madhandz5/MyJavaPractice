/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2020-04-13 10:39:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _01_005fjspSample_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

public String declaration() {

		String startDeclaration = "<%!     ";
		String endDeclaration = "% > ";

		return startDeclaration + endDeclaration;
	}
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>01_JspSample</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>JSP 기초</h1>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\tJSP는 기존에 서버용 자바언어인 Servlet에서<br> 화면 구현에 관련된 소스 부분을 별도로 분리하는 기술을\r\n");
      out.write("\t\t말한다.\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<h3>지시자 태그(Directive)</h3>\r\n");
      out.write("\t");

		String startDirective = "<%@     ";
	
      out.write('\r');
      out.write('\n');
      out.write('	');

		String endDirective = "% >";
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t\t");
      out.print(startDirective + endDirective);
      out.write("\r\n");
      out.write("\t</pre>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t지시자 태그란, 해당하는 페이지 전체에서 사용할 속성을 <br> 지정할 때 사용하는 JSP 태그\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t1. page : 해당 페이지 전체 속성을 지정하는 태그<br> 1-1 : import - 필요한 자바의 클래스를\r\n");
      out.write("\t\timport할 때 사용합니다.<br> 2. include : 다른 위치의 html/jsp 페이지를 현재 페이지에\r\n");
      out.write("\t\t삽입하는 태그<br> 3. taglib : 사용자나 다른 라이브러리에서 제공하는 커스텀 태그를 정의할 때 사용하는\r\n");
      out.write("\t\t속성\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<h3>스크립틀릿 태그(Scriptlet)</h3>\r\n");
      out.write("\t");

		String startScriptlet = "<%     ";
		String endScriptlet = "% >";
	
      out.write("\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t\t");
      out.print(startScriptlet + endScriptlet);
      out.write("\r\n");
      out.write("\t</pre>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t해당 페이지 내부에서 자바 소스코드를 작성하는 <br> 영역을 나타내는 JSP 태그, 스크립틀릿은 내부적으로 메서드\r\n");
      out.write("\t\t안에서 수행된다.<br> 따라서 static 변수나 메서드 선언등을 할 수 없다.\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<h3>선언 태그(Declaration)</h3>\r\n");
      out.write("\t<pre>\r\n");
      out.write("\t\t");

			declaration();
		
      out.write("\r\n");
      out.write("\t</pre>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t선언 태그는 클래스의 필드에 해당한다.<br> 메서드 선언 가능, static 변수 선언 가능\r\n");
      out.write("\t</p>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<h3>표현식 태그 (Expression)</h3>\r\n");
      out.write("\t");

		String startExpression = "<%=     ";
		String endExpression = "% >";
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<pre>");
      out.print(startExpression + endExpression);
      out.write("</pre>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t표현식 태그란, 특정 객체나, 변수의 값을 출력하는 <br> 용도로 사용하는 JSP 태그이다.\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<h3>주석 태그</h3>\r\n");
      out.write("\t<pre>&lt;% -- --%&gt;</pre>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t주석 태그는 해당 페이지에서 사용되는 jsp 코드나<br> 서버영역의 코드를 주석처리하기 위한 태그이다.\r\n");
      out.write("\t</p>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
