package com.prac.chatting;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.List;

public class ChatServerThread extends Thread {

	private String nickName = null;
	private Socket socket = null;
	List<PrintWriter> list = null;

	public ChatServerThread(Socket socket, List<PrintWriter> list) {
		this.socket = socket;
		this.list = list;
	}

	@Override
	public void run() {

		try {
			BufferedReader bufferedReader = new BufferedReader(
					new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));

			PrintWriter printWriter = new PrintWriter(
					new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8));

			while (true) {
				String read = bufferedReader.readLine();
				if (read == null) {
					System.out.println("연결 끊김");
					quit(printWriter);
					break;
				}

				String[] strings = read.split(":");
				// 입장 하면 입장 메시지
				if (strings[0].equals("hello")) {
					enter(strings[1], printWriter);
				}
				// 메시지 보내면 해당 메시지
				else if (strings[0].equals("msg")) {
					msg(strings[1]);
				}
				// 나가면 나가는 메시지
				else if (strings[0].equals("quit")) {
					quit(printWriter);
				}
				// 메서드 호출
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void quit(PrintWriter printWriter) {

		String quitMsg = this.nickName + "이 나갔습니다.";

		// printWriter를 동기화에 문제 되지 않게 list에서 제거 해준다. 그 sync를 맞추는 역할은 removeWriter 메서드가
		// 담당함.
		removeWriter(printWriter);

		// quitMsg 를 나중에 모든 클라이언트에게 공표할거임.
		msgSend(quitMsg);

	}

	private void removeWriter(PrintWriter printWriter) {
		synchronized (list) {
			list.remove(printWriter);
		}
	}

	private void enter(String nickName, PrintWriter printWriter) {
		this.nickName = nickName;

		String enterMsg = nickName + "이 입장하였습니다.";
		// entermsg 를 나중에 모든 클라이언트에게 공표할거임.
		msgSend(enterMsg);
		// printWriter를 동기화에 문제 되지 않게 list에 추가 해준다. 그 sync를 맞추는 역할은 addWriter 메서드가 담당함.
		addWriter(printWriter);
	}

	private void addWriter(PrintWriter printWriter) {
		synchronized (list) {
			list.add(printWriter);
		}
	}

	private void msgSend(String msg) {
		synchronized (list) {
			for (PrintWriter writer : list) {
				writer.println(msg);
				writer.flush();
			}
		}
	}

	private void msg(String msg) {
		msgSend(this.nickName + " : " + msg);
	}
}
